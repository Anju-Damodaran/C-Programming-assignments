Part 2 takes a different angle: instead of differences, we now look for overlaps. The idea is that some location IDs appear in both lists, and those overlaps are what really matter. To capture this, we calculate a similarity score:

For each number in the left list, count how many times it appears in the right list.

Multiply that count by the number itself.

Add all those values together.

If a number doesn’t appear in the right list, it contributes nothing (0).

Example:

Left list: [3, 4, 2, 1, 3, 3]

Right list: [4, 3, 5, 3, 9, 3]

Step by step:

3 appears 3 times → 3 × 3 = 9

4 appears 1 time → 4 × 1 = 4

2 appears 0 times → 0

1 appears 0 times → 0

3 again (3 times) → 9

3 again (3 times) → 9

Adding these: 31.

This tells us how “similar” the two lists are, weighted by the numbers themselves.

My Approach

Reading the input:
I open the input file and read pairs of numbers into two separate arrays: one for the left list and one for the right. I started with arrays of size 1000 and doubled the size dynamically with realloc if more space was needed.

Computing the similarity score:
For each number in the left list, I loop through the right list to count how many times it appears. Then I multiply that count by the number and add it to the running total.

Output and cleanup:
Finally, I print the total score and free the memory used by the arrays.

Key Details

Efficiency: This uses two nested loops (O(n²)), but since the input size is reasonable, it’s fine for this puzzle.

Memory management: I used malloc for the arrays and realloc to grow them when needed.

Safety: If the file couldn’t be opened or if it was empty, the program exits gracefully with an error message.

Data types: The lists use int, while the similarity score uses long to handle large totals.

Debugging help: I added a line to print the current working directory to make sure the program was looking for the file in the right place.

Testing

Example input (shown above) gives 31, which matches the puzzle description.

Edge cases:

Empty file → program exits with a message.

No overlap → similarity score is 0.

Full overlap → maximum score.

Actual puzzle input: Running the program on my input file produced:

1873376 for Part 1 (distance).

18997088 for Part 2 (similarity score).

These match the expected answers and confirm the solution is correct.
